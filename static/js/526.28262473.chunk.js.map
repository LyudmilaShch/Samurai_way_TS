{"version":3,"file":"static/js/526.28262473.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Dialogs/Dialogs.module.scss?d5e3","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__8L42E\",\"dialogsItems\":\"Dialogs_dialogsItems__KU5n5\",\"names\":\"Dialogs_names__ziqDU\",\"dialogName\":\"Dialogs_dialogName__qUdNa\",\"messages\":\"Dialogs_messages__xFprF\",\"nameMessages\":\"Dialogs_nameMessages__JclQz\",\"messagesContainer\":\"Dialogs_messagesContainer__v2Wbr\",\"message\":\"Dialogs_message__li36A\",\"angle\":\"Dialogs_angle__6oRFK\",\"blockMessage\":\"Dialogs_blockMessage__3-cP1\",\"name\":\"Dialogs_name__ccYN+\",\"text\":\"Dialogs_text__l886U\",\"messageRight\":\"Dialogs_messageRight__i5V68\",\"angleRight\":\"Dialogs_angleRight__3LtgD\",\"blockMessageRight\":\"Dialogs_blockMessageRight__JpGWp\",\"sendMessageContainer\":\"Dialogs_sendMessageContainer__jWb-c\",\"sendMessageArea\":\"Dialogs_sendMessageArea__0QQhb\",\"buttonContainer\":\"Dialogs_buttonContainer__AJnnz\",\"sendMessageButton\":\"Dialogs_sendMessageButton__Tnjkj\"};","import React from 'react';\r\nimport s from '../Dialogs.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    name: string,\r\n    avatar: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <div className={s.names}>\r\n            <img\r\n                src={props.avatar}/>\r\n            <div className={s.dialogName}>\r\n                <NavLink to={path} className=\"inactive\" activeClassName=\"active\" exact={true}>{props.name}</NavLink>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React from 'react';\r\nimport s from '../Dialogs.module.scss';\r\n\r\ntype MessageType = {\r\n    avatar: string,\r\n    message: string,\r\n    name: string\r\n}\r\n\r\nexport const Message = (props: MessageType) => {\r\n    let locationBlockMessage;\r\n    let locationMessage;\r\n    let locationAngle;\r\n    if (props.name === \"Leo\") {\r\n        locationMessage = s.messageRight;\r\n        locationAngle = s.angleRight;\r\n        locationBlockMessage = s.blockMessageRight;\r\n    } else {\r\n        locationMessage = s.message;\r\n        locationAngle = s.angle;\r\n        locationBlockMessage = s.blockMessage;\r\n    }\r\n    return (\r\n        <div className={locationMessage}>\r\n            <img src={props.avatar} alt=\"Avatar\"></img>\r\n            <div className={locationAngle}/>\r\n            <div className={locationBlockMessage}>\r\n                {/*<div className={s.name}>{props.name}</div>*/}\r\n                <div className={s.text}>{props.message}</div>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.scss';\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../common/FormControls/FormsControls\";\r\n\r\n\r\ntype MessageDataType = {\r\n    newMessageText: string\r\n}\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    let state = props.dialogsPage\r\n    let dialogsElements =\r\n       state.dialogs.map(d => <DialogItem name={d.name} avatar={d.avatar} id={d.id} key={d.id}/>)\r\n\r\n    let messagesElements =\r\n        state.messages.map(m => <Message avatar={m.avatar} name={m.name} message={m.message} key={m.id}/>)\r\n\r\n\r\n    let addNewMessage = (values: MessageDataType) => {\r\n        props.sendMessage(values.newMessageText) ;\r\n    }\r\n\r\n        return (\r\n\r\n        <div className={s.dialogs}>\r\n\r\n            <div className={s.dialogsItems}>\r\n                Dialogs\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div className={s.nameMessages}> Rabbit</div>\r\n                <div className={s.messagesContainer}>\r\n                    {messagesElements}\r\n                </div>\r\n\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<MessageDataType>> = (props)  => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.sendMessageContainer}>\r\n                <Field component={Textarea}\r\n                       name={\"newMessageText\"}\r\n                       placeholder={\"Enter your message\"}\r\n                       className={s.sendMessageArea}\r\n                       validate={[required, maxLength50]}/>\r\n\r\n                    {/*<textarea className={s.sendMessageArea}*/}\r\n                    {/*          value={state.newMessageText}*/}\r\n                    {/*          onChange={messageOnChange}>*/}\r\n                    {/*</textarea>*/}\r\n                <div className={s.buttonContainer}>\r\n                    <button className={s.sendMessageButton}>Send</button>\r\n                </div>\r\n\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<MessageDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm);","import {Redirect} from \"react-router-dom\";\r\nimport React, {Component, ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.data.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const AuthRedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/Login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(AuthRedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","import React from 'react';\r\nimport {InitialStateType, SendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: InitialStateType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMessageText: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n\r\n    return {\r\n        sendMessage:(newMessageText: string) => {\r\n            dispatch(SendMessageCreator(newMessageText));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"names":["DialogItem","props","path","id","className","s","src","avatar","to","activeClassName","exact","name","Message","locationBlockMessage","locationMessage","locationAngle","alt","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","mapStateToProps","state","isAuth","auth","data","compose","connect","dialogsPage","dispatch","sendMessage","newMessageText","SendMessageCreator","Component","restProps","dialogsElements","dialogs","map","d","messagesElements","messages","m","values"],"sourceRoot":""}