{"version":3,"file":"static/js/791.4df0f027.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Profile/ProfileInfo/ProfileInfo.module.css?23b5","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/Components/Profile/MyPosts/MyPosts.module.css?bd90","webpack://samurai-way/./src/Components/Profile/MyPosts/Post/Post.module.css?54ab","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"img_forest\":\"ProfileInfo_img_forest__Z1qml\",\"img\":\"ProfileInfo_img__5bHvU\",\"item\":\"ProfileInfo_item__4vm0K\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__HhUax\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {getStatus} from \"../../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{status}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input autoFocus={true} value={status} onBlur={deactivateEditMode} onChange={onStatusChange}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType,\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo = ({profile, status, updateStatus}: ProfileInfoType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    } else {\r\n        return (\r\n            <div>\r\n                <div className={s.descriptionBlock}>\r\n                    <div className={s.profileImg}>\r\n                        <img className={s.img}\r\n                             src={profile.photos.large  !== null ? profile.photos.large : userPhoto}/>\r\n                    </div>\r\n                   <div className={s.profileDescription}>\r\n                       Name: {profile.fullName}\r\n                       <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                       <br/>\r\n                       About me: {profile.aboutMe}\r\n                   </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MyPosts_item__9AYEg\",\"posts\":\"MyPosts_posts__z5BrU\",\"addPostArea\":\"MyPosts_addPostArea__3MDXn\",\"addPostButton\":\"MyPosts_addPostButton__3Cegu\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__APOrn\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostType = {\r\n    message: string\r\n    avatar?: string\r\n    countlike: number\r\n}\r\n\r\nexport const Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src={props.avatar}/>\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.countlike}</span>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormControls/FormsControls\";\r\n\r\ntype PostDataType = {\r\n    newPostText: string\r\n}\r\n\r\nexport const MyPosts = React.memo((props: PostsPropsType) => {\r\n    console.log('RENDER')\r\n\r\n    let postsElements =\r\n        props.posts.map(p => <Post message={p.message}\r\n                                   avatar={p.avatar}\r\n                                   countlike={p.countlike}\r\n        />)\r\n\r\n    let addNewPost = (values: PostDataType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <div>\r\n                <AddPostFormRedux onSubmit={addNewPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<PostDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={\"newPostText\"}\r\n                       placeholder={\"Enter your post\"}\r\n                       className={s.addPostArea}\r\n                       validate={[required, maxLength10]}/>\r\n\r\n                <button className={s.addPostButton}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<PostDataType>({form: \"AddPostForm\"})(AddPostForm);","import React from 'react';\r\nimport {addPostCreator, PostsType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\ntype MyPostsContainerType = {\r\n    //store: StoreType\r\n}\r\n\r\n\r\n// export const MyPostsContainer = (props: MyPostsContainerType) => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {store => {\r\n//                 let state = store.getState()\r\n//                 const onAddPost = () => {\r\n//                     store.dispatch(addPostCreator(state.profilePage.newPostText));\r\n//                 }\r\n//                 const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n//                     store.dispatch(UpdateNewPostTextCreator(e.currentTarget.value));\r\n//                 }\r\n//                 return <MyPosts\r\n//                     addPost={onAddPost}\r\n//                     updateNewPostText={onPostChange}\r\n//                     posts={state.profilePage.posts}\r\n//                     newPostText={state.profilePage.newPostText}\r\n//                 />\r\n//             }}\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\ntype MapStatePropsType = {\r\n    posts:  Array<PostsType>,\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type PostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType,\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}  status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer\r\n              //  store={props.store}\r\n               />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype StateType = {\r\n\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType, StateType>{\r\n\r\n    componentDidMount() {\r\n        let userId=this.props.match.params.userId;\r\n        if (!userId){\r\n            userId = String(this.props.authorizedUserId);\r\n            if (!userId){\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n       this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.data.userid,\r\n        isAuth: state.auth.data.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n)(ProfileContainer)\r\n\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","value","onBlur","updateStatus","onChange","e","currentTarget","ProfileInfo","profile","className","s","src","photos","large","userPhoto","fullName","aboutMe","Preloader","Post","avatar","message","countlike","MyPosts","React","console","log","postsElements","posts","map","p","AddPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostCreator","Profile","ProfileContainer","userId","this","match","params","String","authorizedUserId","history","push","getUserProfile","getStatus","compose","auth","data","userid","isAuth","withRouter"],"sourceRoot":""}